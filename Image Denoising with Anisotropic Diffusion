from medpy.filter.smoothing import anisotropic_diffusion
from skimage.util import random_noise
import matplotlib.pylab as plt
from skimage.color import rgb2gray
from skimage.io import imread
import numpy as np
import cv2
from tkinter import *
from PIL import ImageTk, Image

root = Tk()
root.title('Image Denoising with Anistropic Diffusion')

img = rgb2gray(imread('images/cameraman.png'))
noisy = random_noise(img, var=0.01)
noisy = np.clip(noisy, 0, 1) 
plt.figure(figsize=(15,15))
plt.gray()
plt.subplots_adjust(0,0,1,1,0.05,0.05)
plt.subplot(221), plt.imshow(img), plt.axis('off'), plt.title('Original', size=20)
plt.subplot(222), plt.imshow(noisy), plt.axis('off'), plt.title('Noisy', size=20)
diff_out1 = anisotropic_diffusion(noisy, niter=20, kappa=20, option=1)
plt.subplot(223), plt.imshow(diff_out1), plt.axis('off'), plt.title(r'Anisotropic Diffusion (Perona Malik eq 1, iter=20, $\kappa=20$)', size=18)
diff_out2 = anisotropic_diffusion(noisy, niter=50, kappa=100, option=2)
plt.subplot(224), plt.imshow(diff_out2), plt.axis('off'), plt.title(r'Anisotropic Diffusion (Perona Malik eq 2, iter=50, $\kappa=50$)', size=18)
plt.show()

cv2.imwrite('images/noisy.png',255*noisy)
cv2.imwrite('images/diff_out1.png',255*diff_out1)
cv2.imwrite('images/diff_out2.png',255*diff_out2)
my_img1 = ImageTk.PhotoImage(Image.open("images/cameraman.png"))
my_img2 = ImageTk.PhotoImage(Image.open("images/noisy.png"))
my_img3 = ImageTk.PhotoImage(Image.open("images/diff_out1.png"))
my_img4 = ImageTk.PhotoImage(Image.open("images/diff_out2.png"))

image_list = [my_img1, my_img2, my_img3, my_img4]

my_label = Label(image = my_img1)
my_label.grid(row = 0, column = 0, columnspan = 3)

def forward(image_number):
       global my_label
       global button_forward
       global button_back

       my_label.grid_forget()
       my_label = Label(image=image_list[image_number-1])
       button_forward = Button(root, text="Forward", command=lambda: forward(image_number+1))
       button_back = Button(root, text="Back", command=lambda: back(image_number-1))

       if image_number == 4:
              button_forward = Button(root, text="Forward", state=DISABLED)
       
       my_label.grid(row=0, column=0, columnspan=3)
       button_back.grid(row=1, column=0)
       button_forward.grid(row=1, column=2)

def back(image_number):
       global my_label
       global button_forward
       global button_back

       my_label.grid_forget()
       my_label = Label(image=image_list[image_number-1])
       button_forward = Button(root, text="Forward", command=lambda: forward(image_number+1))
       button_back = Button(root, text="Back", command=lambda: back(image_number-1))

       if image_number == 1:
              button_back = Button(root, text="Back", state=DISABLED)
       
       my_label.grid(row=0, column=0, columnspan=3)
       button_back.grid(row=1, column=0)
       button_forward.grid(row=1, column=2)

button_back = Button(root, text="Back", command=back, state=DISABLED)
button_exit = Button(root, text="Exit", command=root.destroy)
button_forward = Button(root, text="Forward", command=lambda: forward(2))

button_back.grid(row=1, column=0)
button_exit.grid(row=1, column=1)
button_forward.grid(row=1, column=2)

root.mainloop()
