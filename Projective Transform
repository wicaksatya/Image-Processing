from skimage.transform import ProjectiveTransform
from skimage.io import imread
import numpy as np
import matplotlib.pylab as plt
from tkinter import *
from PIL import ImageTk, Image
import cv2

root = Tk()
root.title('Projective Transform')

im_src = imread('images/painting.png')
im_dst = imread('images/graffiti.png')
im_mask = imread('images/graffiti_mask.png')
im_dst1 = np.copy(im_dst)
height, width, dim = im_src.shape
print(height, width, im_src.shape, im_dst.shape)

pt = ProjectiveTransform()
src = np.array([[   0.,    0.],
       [height-1,    0.],
       [height-1,  width-1],
       [   0.,  width-1]])
dst = np.array([[ 0., 0.],
       [im_dst.shape[0]-1, 0],
       [im_dst.shape[0]-1,  687],
       [ 0., 659]])
print(pt.estimate(src, dst))

im_dst_masked = im_dst & im_mask

x, y = np.mgrid[:im_dst.shape[0], :im_dst.shape[1]]
dst_indices = np.hstack((x.reshape(-1, 1), y.reshape(-1,1))) 
src_indices = np.round(pt.inverse(dst_indices), 0).astype(int)
valid_idx = np.where((src_indices[:,0] < height) & (src_indices[:,1] < width) & (src_indices[:,0] >= 0) & (src_indices[:,1] >= 0))
dst_indicies_valid = dst_indices[valid_idx]
src_indicies_valid = src_indices[valid_idx]
im_dst[dst_indicies_valid[:,0],dst_indicies_valid[:,1]] = im_src[src_indicies_valid[:,0],src_indicies_valid[:,1]]
im_dst &= (~im_mask) 
im_dst += im_dst_masked
plt.figure(figsize=(20,30))
plt.subplot(311), plt.imshow(im_src), plt.axis('off'), plt.title('Source image', size=30)
plt.subplot(312), plt.imshow(im_dst1), plt.axis('off'), plt.title('Destination image', size=30)
plt.subplot(313), plt.imshow(im_dst), plt.axis('off'), plt.title('Final image', size=30)
plt.show()

image_rgb = cv2.cvtColor(im_dst, cv2.COLOR_BGR2RGB)
cv2.imwrite('images/masked.png',image_rgb)
my_img1 = ImageTk.PhotoImage(Image.open("images/painting.png"))
my_img2 = ImageTk.PhotoImage(Image.open("images/graffiti.png"))
my_img3 = ImageTk.PhotoImage(Image.open("images/masked.png"))

image_list = [my_img1, my_img2, my_img3]

my_label = Label(image = my_img1)
my_label.grid(row = 0, column = 0, columnspan = 3)

def forward(image_number):
       global my_label
       global button_forward
       global button_back

       my_label.grid_forget()
       my_label = Label(image=image_list[image_number-1])
       button_forward = Button(root, text="Forward", command=lambda: forward(image_number+1))
       button_back = Button(root, text="Back", command=lambda: back(image_number-1))

       if image_number == 3:
              button_forward = Button(root, text="Forward", state=DISABLED)
       
       my_label.grid(row=0, column=0, columnspan=3)
       button_back.grid(row=1, column=0)
       button_forward.grid(row=1, column=2)

def back(image_number):
       global my_label
       global button_forward
       global button_back

       my_label.grid_forget()
       my_label = Label(image=image_list[image_number-1])
       button_forward = Button(root, text="Forward", command=lambda: forward(image_number+1))
       button_back = Button(root, text="Back", command=lambda: back(image_number-1))

       if image_number == 1:
              button_back = Button(root, text="Back", state=DISABLED)
       
       my_label.grid(row=0, column=0, columnspan=3)
       button_back.grid(row=1, column=0)
       button_forward.grid(row=1, column=2)

button_back = Button(root, text="Back", command=back, state=DISABLED)
button_exit = Button(root, text="Exit", command=root.destroy)
button_forward = Button(root, text="Forward", command=lambda: forward(2))

button_back.grid(row=1, column=0)
button_exit.grid(row=1, column=1)
button_forward.grid(row=1, column=2)

root.mainloop()
