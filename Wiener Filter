%matplotlib inline
from skimage import color, data, restoration
import scipy.fftpack as fp
from skimage.metrics import peak_signal_noise_ratio
from skimage.io import imread
import numpy as np
import matplotlib.pylab as plt
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import cv2
from tkinter import *
from PIL import ImageTk, Image

root = Tk()
root.title('Wiener Filter')

def convolve2d(im, psf, k):
    M, N = im.shape
    freq = fp.fft2(im)
    psf = np.pad(psf, (((M-k)//2,(M-k)//2+1), ((N-k)//2,(N-k)//2+1)), mode='constant') # assumption: min(M,N) > k > 0, k odd
    freq_kernel = fp.fft2(fp.ifftshift(psf))
    return np.abs(fp.ifft2(freq*freq_kernel))

def plot_freq_filter(F, title, size=20):
    plt.imshow(20*np.log10( 0.01 + np.abs(fp.fftshift(F))), cmap='coolwarm'), plt.title(title, size=size), plt.colorbar()

def plot_freq_spec_3d(freq):
    fig = plt.figure(figsize=(10,10))
    ax = fig.gca(projection='3d')
    Y = np.arange(-freq.shape[0]//2,freq.shape[0]-freq.shape[0]//2)
    X = np.arange(-freq.shape[1]//2,freq.shape[1]-freq.shape[1]//2)
    X, Y = np.meshgrid(X, Y)
    Z = (20*np.log10( 0.01 + fp.fftshift(freq))).real
    surf = ax.plot_surface(X, Y, Z, cmap=plt.cm.coolwarm,
                           linewidth=0, antialiased=True)
    ax.zaxis.set_major_locator(LinearLocator(10))
    ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))
    plt.show()

im = color.rgb2gray(imread('images/cactus.png'))
k = 5
psf = np.ones((k, k)) / k**2
im1 = convolve2d(im, psf, k)
im1 += 0.3 * im.std() * np.random.standard_normal(im.shape)
im2, _ = restoration.unsupervised_wiener(im1, psf)
im3 = restoration.wiener(im1, psf, balance=0.25)
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(20, 12), sharex=True, sharey=True)
plt.gray()
axes[0,0].imshow(im), axes[0,0].axis('off'), axes[0,0].set_title('Original image', size=20)
axes[0,1].imshow(im1), axes[0,1].axis('off'), axes[0,1].set_title('Noisy blurred image: PSNR={:.3f}'.format(peak_signal_noise_ratio(im, im1)), size=20)
axes[1,0].imshow(im2), axes[1,0].axis('off'), axes[1,0].set_title('Self tuned Wiener restoration: PSNR={:.3f}'.format(peak_signal_noise_ratio(im, im2)), size=20)
axes[1,1].imshow(im3), axes[1,1].axis('off'), axes[1,1].set_title('Wiener restoration: PSNR={:.3f}'.format(peak_signal_noise_ratio(im, im3)), size=20)
fig.tight_layout()
plt.show()

cv2.imwrite('images/im.png',255*im)
cv2.imwrite('images/im1.png',255*im1)
cv2.imwrite('images/im2.png',255*im2)
cv2.imwrite('images/im3.png',255*im3)

im = Image.open("images/im.png")
im1 = Image.open("images/im1.png")
im2 = Image.open("images/im2.png")
im3 = Image.open("images/im3.png")

newsize = (500,500)
resize_image = im.resize(newsize)
resize_image1 = im1.resize(newsize)
resize_image2 = im2.resize(newsize)
resize_image3 = im3.resize(newsize)

my_img1 = ImageTk.PhotoImage(resize_image)
my_img2 = ImageTk.PhotoImage(resize_image1)
my_img3 = ImageTk.PhotoImage(resize_image2)
my_img4 = ImageTk.PhotoImage(resize_image3)

image_list = [my_img1, my_img2, my_img3, my_img4]

my_label = Label(image = my_img1)
my_label.grid(row = 0, column = 0, columnspan = 3)

def forward(image_number):
       global my_label
       global button_forward
       global button_back

       my_label.grid_forget()
       my_label = Label(image=image_list[image_number-1])
       button_forward = Button(root, text="Forward", command=lambda: forward(image_number+1))
       button_back = Button(root, text="Back", command=lambda: back(image_number-1))

       if image_number == 4:
              button_forward = Button(root, text="Forward", state=DISABLED)
       
       my_label.grid(row=0, column=0, columnspan=3)
       button_back.grid(row=1, column=0)
       button_forward.grid(row=1, column=2)

def back(image_number):
       global my_label
       global button_forward
       global button_back

       my_label.grid_forget()
       my_label = Label(image=image_list[image_number-1])
       button_forward = Button(root, text="Forward", command=lambda: forward(image_number+1))
       button_back = Button(root, text="Back", command=lambda: back(image_number-1))

       if image_number == 1:
              button_back = Button(root, text="Back", state=DISABLED)
       
       my_label.grid(row=0, column=0, columnspan=3)
       button_back.grid(row=1, column=0)
       button_forward.grid(row=1, column=2)

button_back = Button(root, text="Back", command=back, state=DISABLED)
button_exit = Button(root, text="Exit", command=root.quit)
button_forward = Button(root, text="Forward", command=lambda: forward(2))

button_back.grid(row=1, column=0)
button_exit.grid(row=1, column=1)
button_forward.grid(row=1, column=2)

root.mainloop()
